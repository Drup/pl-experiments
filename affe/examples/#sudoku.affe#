# Sudoku solver
#
# One efficient way to represent a sudoku board is to use a matrix
# where each cell contains a set of acceptable integers.
# The algorithms will then pick a number, and propagate the changes
# in the various cells by mutating the board.
# Unfortunately, solving sudoku might ocasionally involve some
# backtracking. At this point, the board must be copied.

# 1 We state the various primitive functions we need
val array_init : 
  \ 'k ('a : _). int -> (int -{'k}> 'a) -{'k}> 'a array
val array_length : \ 'k ('a:_). &('k, 'a array) -> int
val array_for_all :
  \ 'k 'k2 ('a: _) . 
  ('a -{'k2}> bool) -> &('k, 'a array) -{'k2}> bool
val array_get : \ 'k ('a:_). &('k, 'a array) * int -> 'a
val array_set : \ 'k ('a:_). &!('k, 'a array) * int * 'a -> unit
val not : bool -> bool
val and : bool -> bool -> bool

# 2 We import the hybrid arrays (see cow.affe for more details)
let get (x, i) = x.(i)
let copy a = array_init (array_length a) (fun i -> a.(i))
let set (a, i, x) =
  let a2 = copy a in
  let x = {(&!a2).(i) <- x} in
  a2
let set_mut (a, i, x) = a.(i) <- x

# 3 We state a notion of integer sets

type intset
val empty : intset
val add : intset -> int -> intset
val rm : intset -> int -> intset
val iter_set : \ 'k . (int -{'k}> unit) -> intset -{'k}> unit
val cardinal : intset -> int
val print : \ 'k . &('k,intset array) -> unit

# 4 Various utilities functions


# Hybrid matrices operations
let get x (i, j) = get x (i*size+j)
let set_mut x (i, j) v = set_mut x (i*size+j) v
let set x (i, j) v = set x (i*size+j) v

# the for loop function
let for =
 let rec aux i j f =
   match i > j with {
   | True -> ()
   | False ->
     let () = f i in
     aux (i+1) j f
  }
  in aux

# 5 Finally, we can solve the sudoku!

# Size of the board
let size = 9

# A full cell with all numbers from 1 to 9
let full_cell =
  let rec f i xset =
    match i < 0 with {
     | True -> xset
     | False -> f (i - 1) (add xset i)
    }
  in
  f (size - 1) empty

# A cell with only a single number
let singleton n = add empty n

## The next 3 functions aims to propagate changes on the board.
# They take a *mutable* borrow of the board, and make a series of
# mutable modifications to it.

# Remove the number `n` from the line after `(i0,j0)`
let remove_line i0 j0 g n =
  for (j0+1) (size - 1) (fun j -> 
    let cell = { rm (get &&g (i0 , j)) n } in
    {set_mut &&!g (i0, j) cell}
  )

# Remove the number `n` from the column after `(i0,j0)`
let remove_column i0 j0 g n =
  for (i0+1) (size - 1) (fun i ->
    let cell = { rm (get &&g (i , j0)) n } in
    {set_mut &&!g (i , j0) cell}
  )

# Remove the number `n` from the square containing `(i0,j0)`
let remove_square i0 j0 g n =
  let pos_i = i0 / 3 in
  let pos_j = j0 / 3 in
  for (3*pos_i) (3*(pos_i+1) - 1) (fun i ->
    for (3*pos_j) (3*(pos_j+1) - 1) (fun j ->
      match and (i = i0) (j = j0) with {
        | False ->
           let cell = { rm (get &&g (i , j)) n } in
           {set_mut &&!g (i , j) cell}
         | True ->
           ()
      }
    )
  )

# Finally, the general function that propagate solving decisions.
# Note the reuse of the mutable borrow in sequence. 
# This is perfectly allowed, since no reference to the borrow
# is kept.
let remove i j g n =
  let () = { remove_line i j &&!g n } in
  let () = { remove_column i j &&!g n } in
  let () = { remove_square i j &&!g n } in
  ()

let is_valid g =
  for_all (fun x -> cardinal x > 0) g

let is_solved g =
  for_all (fun x -> cardinal x = 1) g

let next_pos (i, j) =
  match j < (size - 1) with {
  | True -> (i, j + 1)
  | False -> (i + 1, 0)
}

# Finally, the recursive function that solves the sudoku.
# It walks over each cell, branches off by picking
# one of the possible number for that cell, doing an
# immutable modification of the cell, propagating the change,
# and calling the function recursively.
#
# The `try_solution` captures an *immutable* borrow of the current
# board, which allows it to be called multiple times, for each
let solve =
  let rec solve i j g =
    match is_solved &g with {
    | True -> print &g
    | False ->
      let s = get &g (i,j) in
      let (new_i, new_j) = next_pos (i,j) in
      let try_solution n =
        let new_g = set &g (i,j) (singleton n) in
        let () = { remove i j &!new_g n } in
        match { is_valid &new_g } with {
        | True -> { solve new_i new_j new_g }
        | False -> ()
        }
      in
      iter_set try_solution s
    }
  in solve