# Misc

val not : bool -> bool
val and : bool -> bool -> bool

# Int sets

type intset
val empty : intset
val add : intset -> int -> intset
val rm : intset -> int -> intset
val iter_set : \ 'k . (int -{'k}> unit) -> intset -{'k}> unit
val cardinal : intset -> int


val print : \ 'k . &('k,intset array) -> unit

let size = 9

let full_cell =
  let rec f i xset =
    match i < 0 with {
     | True -> xset
     | False -> f (i - 1) (add xset i)
    }
  in
  f (size - 1) empty

let singleton n = add empty n

let get x (i, j) = get x (i*size+j)
let set_mut x (i, j) v = set_mut x (i*size+j) v
let set x (i, j) v = set x (i*size+j) v

val for_all : \ 'k 'k2 ('a: _) . ('a -{'k2}> bool) -> &('k, 'a array) -{'k2}> bool

let for =
 let rec aux i j f =
   match i > j with {
   | True -> ()
   | False ->
     let () = f i in
     aux (i+1) j f
  }
  in aux


let remove_line i0 j0 g n =
  for (j0+1) (size - 1) (fun j -> 
    let cell = { rm (get &&g (i0 , j)) n } in
    {set_mut &&!g (i0, j) cell}
  )

let remove_column i0 j0 g n =
  for (i0+1) (size - 1) (fun i ->
    let cell = { rm (get &&g (i , j0)) n } in
    {set_mut &&!g (i , j0) cell}
  )

let remove_square i0 j0 g n =
  let pos_i = i0 / 3 in
  let pos_j = j0 / 3 in
  for (3*pos_i) (3*(pos_i+1) - 1) (fun i ->
    for (3*pos_j) (3*(pos_j+1) - 1) (fun j ->
      match and (i = i0) (j = j0) with {
        | False ->
           let cell = { rm (get &&g (i , j)) n } in
           {set_mut &&!g (i , j) cell}
         | True ->
           ()
      }
    )
  )

let is_valid g =
  for_all (fun x -> cardinal x > 0) g

let is_solved g =
  for_all (fun x -> cardinal x = 1) g

let next_pos (i, j) =
  match j < (size - 1) with {
  | True -> (i, j + 1)
  | False -> (i + 1, 0)
}

let remove i j g n =
  let () = { remove_line i j &&!g n } in
  let () = { remove_column i j &&!g n } in
  let () = { remove_square i j &&!g n } in
  ()




let solve =
  let rec solve i j g =
    match is_solved &g with {
    | True -> print &g
    | False ->
      let s = get &g (i,j) in
      let (new_i, new_j) = next_pos (i,j) in
      let try_solution n =
        let new_g = set &g (i,j) (singleton n) in
        let () = { remove i j &!new_g n } in
        match { is_valid &new_g } with {
        | True -> { solve new_i new_j new_g }
        | False -> ()
        }
      in
      iter_set try_solution s
    }
  in solve